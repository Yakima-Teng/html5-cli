// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development'
process.env.NODE_ENV = 'development'

// Makes the script crash on unhandled rejections instead of silently ignoring them.
// In the future, promise rejections that are not handled will
// teminate the Nojs.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
    throw err
})

const fs = require('fs')
const chalk = require('chalk')
const webpack = require('webpack')
const path = require('path')
const WebpackDevServer = require('webpack-dev-server')
const clearConsole = require('react-dev-utils/clearConsole')
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles')
const {
    choosePort,
    createCompiler,
    prepareProxy,
    prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils')
const openBrowser = require('react-dev-utils/openBrowser')
const config = require('./webpack.dev.config')
const createDevServerConfig = require('./webpack-dev-server.config')

const useYarn = fs.existsSync(path.resolve(__dirname, '../yarn.lock'))
const isInteractive = process.stdout.isTTY

// Warn and crash if required files are missing
if (!checkRequiredFiles([
    path.resolve(__dirname, '../src/index.html'),
    path.resolve(__dirname, '../src/js/app.js'),
])) {
    process.exit(1)
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000
const HOST = process.env.HOST || '0.0.0.0'

if (process.env.HOST) {
    /* eslint-disable no-console */
    console.log(
        chalk.cyan(
            `Attempting to bind to HOST environment variable: ${chalk.yellow(
                chalk.bold(process.env.HOST)
            )}`
        )
    )
    console.log(
        `If this was unintentional, check that you haven't mistakenly set it in your shell.`
    )
    console.log(
        `Learn more here: ${chalk.yellow('http://bit.ly/CRA-advanced-config')}`
    )
    console.log()
    /* eslint-enable no-console */
}

// We require that you explictly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require('react-dev-utils/browsersHelper')
checkBrowsers(path.resolve(__dirname, '../'), isInteractive)
    .then(() => {
        // We attempt to use the default port but if it is busy, we offer the user to
        // run on a different port. `choosePort()` Promise resolves to the next free port.
        return choosePort(HOST, DEFAULT_PORT)
    })
    .then(port => {
        if (port == null) {
            // We have not found a port.
            return
        }
        const protocol = process.env.HTTPS === 'true' ? 'https' : 'http'
        const appName = require(path.resolve(__dirname, '../package.json')).name
        const urls = prepareUrls(protocol, HOST, port)
        // Create a webpack compiler that is configured with custom messages.
        const compiler = createCompiler({ webpack, config, appName, urls, useYarn })
        // Load proxy config
        const proxySetting = require(path.resolve(__dirname, '../package.json')).proxy
        const proxyConfig = prepareProxy(proxySetting, path.resolve(__dirname, '../'))
        // Serve webpack assets generated by the compiler over a web server.
        const serverConfig = createDevServerConfig(
            proxyConfig,
            urls.lanUrlForConfig
        )
        const devServer = new WebpackDevServer(compiler, serverConfig)
        // Launch WebpackDevServer.
        devServer.listen(port, HOST, err => {
            if (err) {
                /* eslint-disable no-console */
                return console.log(err)
                /* eslint-enable no-console */
            }
            if (isInteractive) {
                clearConsole()
            }
            /* eslint-disable no-console */
            console.log(chalk.cyan('Starting the development server...\n'))
            /* eslint-enable no-console */
            openBrowser(urls.localUrlForBrowser)
        });

        ['SIGINT', 'SIGTERM'].forEach(function (sig) {
            process.on(sig, function () {
                devServer.close()
                process.exit()
            })
        })
    })
    .catch(err => {
        if (err && err.message) {
            /* eslint-disable no-console */
            console.log(err.message)
            /* eslint-enable no-console */
        }
        process.exit(1)
    })

#!/usr/bin/env node

const process = require('process')
const path = require('path')

const program = require('commander')
const inquirer = require('inquirer')
const ora = require('ora')
const fs = require('fs-extra')
const chalk = require('chalk')
const { downloadTemplate } = require('giget')
const express = require('express')
const gulp = require('gulp')

const pkg = require('../package.json')

/**
 * util functions
 */
// eslint-disable-next-line no-console
const log = console.log
const downloadTemplateToSpecifiedPath = ({ template, savePath }) => new Promise((resolve, reject) => {
  const spinner = ora('downloading template')
  spinner.start()
  // 先清空，避免出现git仓库模板文件中删除了的文件，因为本地缓存的此前版本中还存在，而导致创建的新项目模板文件中仍旧存在的问题
  fs.removeSync(savePath)
  downloadTemplate(template, {
    dir: savePath,
    provider: 'github',
  })
    .then(() => {
      spinner.stop()
      log(chalk.green(`template ${template} is successfully downloaded to ${savePath}`))
      resolve(null)
    })
    .catch((err) => {
      spinner.stop()
      logger.fatal(`Failed to download template ${template} to ${savePath}: ${err.message.trim()}`)
      reject(err.message.trim())
    })
})

program.version(pkg.version)
program.usage('<command>')

program
  .command('init <project-name>')
  .usage('<project-name> [options]')
  .description('create a web project for mobile devices, directly using Vanilla JS, or using Vue3 + TypeScript + Pinia')
  .option('-t, --template <template-name>', 'specify the template to use, available template names are `classic` (default) and `vue3`')
  .on('--help', function() {
    log('');
    log('Examples:');
    log('');
    log('  $ html5 init <project-name>');
    log('  $ h5 init --template=vue3 <project-name>');
  })
  .action(function(projectName, options){
    const template = options.template
    const savePath = path.resolve(process.cwd(), projectName || '.')
    const availableTemplateNames = ['classic', 'vue3']
    // 如果用户显示指定了模版，就直接使用对应模版
    if (template) {
      if (availableTemplateNames.includes(template)) {
        downloadTemplateToSpecifiedPath({
          template: `github:Yakima-Teng/html5-cli/templates/${template}#master`,
          savePath,
        }).catch(log)
        return
      }
      log(chalk.red(`The template name '${template}' is not available, available names are ${availableTemplateNames.join('、')}.`))
      return
    }

    // 如果用户没有显示指定模板，就在终端中让用户选择模版
    inquirer
      .prompt([
        {
          type: 'list',
          name: 'template',
          message: 'Which template do you want to use?',
          choices: [
            'classic: using Vanilla JS without building tools like Vite or Webpack',
            'Vue3: using Vue3 + TypeScript + Pinia, with Vite as the building tool',
          ],
          filter(val) {
            return val.split(':')[0].toLowerCase()
          },
        },
      ])
      .then((answers) => {
        const template = answers.template
        if (availableTemplateNames.includes(template)) {
          downloadTemplateToSpecifiedPath({
            template: `github:Yakima-Teng/html5-cli/templates/${template}#master`,
            savePath,
          }).catch(log)
          return
        }
        log(chalk.red(`The template name '${template}' is not available, available names are ${availableTemplateNames.join('、')}.`))
      });
  })

program
  .command('build')
  .usage('[options]')
  .description('develop a web project using Vanilla JS with live reload out of the box')
  .option('-p, --port <template-name>', 'specify the server port to be used, default is 8080')
  .on('--help', function() {
    log('');
    log('Examples:');
    log('');
    log('  $ html5 build <project-name>');
    log('  $ h5 build <project-name> --port 8081');
  })
  .action(function(options){
    // 当前工作目录（用户在命令行执行`classic`命令时所在的目录）
    const cwd = process.cwd()
    const port = parseInt(options.port || '8080', 10)

    const app = express()
    const server = require('http').createServer(app);
    const io = require('socket.io')(server);

    io.on('connection', () => {
      console.log('io connected')
    })

    const triggerRefresh = () => {
      io.emit("refresh", "");
    }

    const clientCodeToInject = `
      <script src="/socket.io/socket.io.min.js"></script>
      <script>
        const socket = window.io(location.origin, {
          withCredentials: true,
          extraHeaders: {}
        });
        socket.on("connect", () => {
          console.log('websocket connected');
        });
        socket.on("refresh", () => {
          location.reload()
        });
        socket.on("close", (reason) => {
          console.log('websocket is closed due to: ', reason);
        });
      </script>
    `

    app.get(/.*\/$/, (req, res) => {
      const filePath = path.join(cwd, req.path, 'index.html')
      const fileContent = fs.readFileSync(filePath, { encoding: 'utf-8' })
      res.writeHead(200, { 'Content-Type':'text/html'});
      res.end(fileContent + clientCodeToInject)
    })

    app.get(/.*\.html/, (req, res) => {
      const filePath = path.join(cwd, req.path)
      const fileContent = fs.readFileSync(filePath, { encoding: 'utf-8' })
      res.writeHead(200, { 'Content-Type':'text/html'});
      res.end(fileContent + clientCodeToInject)
    })

    app.use(express.static(cwd))

    server.listen(port, () => {
      log(chalk.green(`server listened to port ${port}`))
    })

    gulp.watch(
      [
        path.join(cwd, '**/*'),
        '!' + path.join(cwd, '**/*.min.css'),
        '!' + path.join(cwd, '**/*.min.js'),
      ],
      { delay: 300 },
      (cb) => {
        triggerRefresh()
        cb()
      }
    )
  })

program.parse(process.argv);

process.on('exit', (code) => {
  log(`exited with code ${code}`)
})
